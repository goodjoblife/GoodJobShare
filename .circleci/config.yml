version: 2
jobs:
    build:
        working_directory: ~/app
        docker:
            - image: node
        steps:
            - checkout
            - restore_cache:
                key: dependency-cache-{{ checksum "yarn.lock" }}
            - run:
                name: Install Dependencies
                command: yarn install
            - save_cache:
                key: dependency-cache-{{ checksum "yarn.lock" }}
                paths:
                  - ./node_modules
            - run:
                name: Lint and Unit test
                command: npm test
            - run:
                name: Build
                command: npm run build
    build_dev_docker:
        working_directory: ~/app
        docker:
            - image: alpine
        steps:
            - checkout
            - run:
                name: Install Docker client & Docker Compose
                command: ./.circleci/prepare-docker-compose.sh
            - setup_remote_docker
            - run:
                name: Build Docker and Push
                command: |
                    if [ "${CIRCLE_PROJECT_USERNAME}" == "goodjoblife" ]; then
                        ./.circleci/build-dev-docker.sh
                    fi
    build_stage_docker:
        working_directory: ~/app
        docker:
            - image: alpine
        steps:
            - checkout
            - run:
                name: Install Docker client & Docker Compose
                command: ./.circleci/prepare-docker-compose.sh
            - setup_remote_docker
            - run:
                name: Build Docker and Push
                command: |
                    if [ "${CIRCLE_PROJECT_USERNAME}" == "goodjoblife" ]; then
                        ./.circleci/build-stage-docker.sh
                    fi
    build_production_docker:
        working_directory: ~/app
        docker:
            - image: alpine
        steps:
            - checkout
            - run:
                name: Install Docker client & Docker Compose
                command: ./.circleci/prepare-docker-compose.sh
            - setup_remote_docker
            - run:
                name: Build Docker and Push
                command: |
                    if [ "${CIRCLE_PROJECT_USERNAME}" == "goodjoblife" ]; then
                        ./.circleci/build-production-docker.sh
                    fi
    deploy-dev:
        working_directory: ~/app
        docker:
            - image: buildpack-deps
        steps:
            - run:
                name: Trigger Deploy
                command: |
                    if [ "${CIRCLE_PROJECT_USERNAME}" == "goodjoblife" ]; then
                        curl --user ${CIRCLE_API_TOKEN_FOR_DEPLOY}: \
                            --data build_parameters[CIRCLE_JOB]=build \
                            https://circleci.com/api/v1.1/project/github/mark86092/goodjob-deploy-ci/tree/www-dev
                    fi
    deploy-stage:
        working_directory: ~/app
        docker:
            - image: buildpack-deps
        steps:
            - run:
                name: Trigger Deploy
                command: |
                    if [ "${CIRCLE_PROJECT_USERNAME}" == "goodjoblife" ]; then
                        curl --user ${CIRCLE_API_TOKEN_FOR_DEPLOY}: \
                            --data build_parameters[CIRCLE_JOB]=build \
                            https://circleci.com/api/v1.1/project/github/mark86092/goodjob-deploy-ci/tree/www-stage
                    fi
workflows:
    version: 2
    build_and_test:
        jobs:
            - build
            - build_dev_docker:
                filters:
                    branches:
                        only: dev
            - build_stage_docker:
                filters:
                    branches:
                        only: master
            - build_production_docker:
                filters:
                    branches:
                        only: master
            - deploy-dev:
                requires:
                    - build
                    - build_dev_docker
                filters:
                    branches:
                        only: dev
            - deploy-stage:
                requires:
                    - build
                    - build_stage_docker
                filters:
                    branches:
                        only: master
